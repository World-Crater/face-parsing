// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "face-parsing/domain"

	mock "github.com/stretchr/testify/mock"
)

// FaceService is an autogenerated mock type for the FaceService type
type FaceService struct {
	mock.Mock
}

// GetInfos provides a mock function with given fields: limit, offset
func (_m *FaceService) GetInfos(limit uint, offset uint) (*domain.GetInfosResponse, error) {
	ret := _m.Called(limit, offset)

	var r0 *domain.GetInfosResponse
	if rf, ok := ret.Get(0).(func(uint, uint) *domain.GetInfosResponse); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetInfosResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfosAllActresses provides a mock function with given fields:
func (_m *FaceService) GetInfosAllActresses() ([]domain.Actress, error) {
	ret := _m.Called()

	var r0 []domain.Actress
	if rf, ok := ret.Get(0).(func() []domain.Actress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Actress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostFace provides a mock function with given fields: filePath, infoId
func (_m *FaceService) PostFace(filePath string, infoId string) (*domain.PostFaceResponse, error) {
	ret := _m.Called(filePath, infoId)

	var r0 *domain.PostFaceResponse
	if rf, ok := ret.Get(0).(func(string, string) *domain.PostFaceResponse); ok {
		r0 = rf(filePath, infoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostFaceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filePath, infoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostInfo provides a mock function with given fields: filePath, actress
func (_m *FaceService) PostInfo(filePath string, actress domain.Actress) (*domain.PostInfosResponse, error) {
	ret := _m.Called(filePath, actress)

	var r0 *domain.PostInfosResponse
	if rf, ok := ret.Get(0).(func(string, domain.Actress) *domain.PostInfosResponse); ok {
		r0 = rf(filePath, actress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostInfosResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, domain.Actress) error); ok {
		r1 = rf(filePath, actress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSearch provides a mock function with given fields: filePath
func (_m *FaceService) PostSearch(filePath string) (*domain.PostSearchResponse, error) {
	ret := _m.Called(filePath)

	var r0 *domain.PostSearchResponse
	if rf, ok := ret.Get(0).(func(string) *domain.PostSearchResponse); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostSearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
